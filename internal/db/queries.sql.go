// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertUser = `-- name: InsertUser :one
insert into users (id, email, name)
	values ($1, $2, $3)
	returning email, name, created_at, version
`

type InsertUserParams struct {
	ID    pgtype.UUID
	Email string
	Name  string
}

type InsertUserRow struct {
	Email     string
	Name      string
	CreatedAt pgtype.Timestamp
	Version   int32
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.ID, arg.Email, arg.Name)
	var i InsertUserRow
	err := row.Scan(
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, name, country_code, phone_number, address, password_hash, created_at, updated_at, version from users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.CountryCode,
			&i.PhoneNumber,
			&i.Address,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
